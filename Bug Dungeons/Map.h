#ifndef MAP_H
#define MAP_H

#include "Game.h"
#include "Tile.h"
#include <cstring>
using namespace std;

class Map{
    private:
        GameDataRef _data;
        sf::Texture _tsTexture;
        TilesheetTile* tiles;
        sf::RectangleShape _filter;
        bool _isLevelCompleted;

        int mapNumbers[MAP_ROWS][MAP_COLUMNS] = {
            { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            { 0, 217, 217, 246, 242, 0, 250, 250, 250, 250, 2, 2, 0, 250, 250, 250,  250, 250, 0, 250, 250, 250, 250, 218, 242, 250, 250, 250, 250, 250, 250, 0},
            { 0, 242, 242, 246, 2, 0, 250, 250, 250, 250, 250, 250, 250, 250, 2, 250, 250, 250, 0, 250, 250, 2, 250, 250, 266, 250, 250, 250, 250, 250, 250, 0},
            { 0, 246, 246, 242, 2, 0, 2, 250, 250, 2, 250, 250, 250, 250, 2, 250, 250, 250, 0, 250, 250, 2, 250, 250, 250, 250, 250, 250, 250, 250, 250, 0},
            { 0, 248, 2, 2, 0, 0, 0, 2, 250, 250, 250, 2, 250, 250, 250, 250, 250, 250, 0, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 0},
            { 0, 2, 2, 2, 0, 0, 0, 2, 250, 250, 2, 2, 0, 0, 0, 0, 0, 0, 0, 250, 250, 250, 250, 250, 250, 250, 250, 250, 2, 2, 250, 0},
            { 0, 250, 250, 2, 250, 250, 250, 250, 250, 250, 250, 2, 0, 0, 0, 0, 0, 0, 0, 250, 250, 2, 250, 250, 250, 250, 250, 250, 2, 2, 250, 0},
            { 0, 250, 204, 204, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 2, 2,2, 2, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 0},
            { 0, 250, 204, 204, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 2, 2, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 0},
            { 0, 250, 204, 204, 250, 250, 250, 250, 2, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 0, 0, 0, 0, 0, 0, 0},
            { 0, 250, 250, 204, 204, 0, 250, 250, 2, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 0, 0, 0, 0, 0, 0, 0},
            { 0, 250, 250, 250, 250, 0, 204, 250, 2, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 0, 2, 2, 2, 2, 2, 0},
            { 0, 250, 250, 250, 250, 0, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 2, 2, 2, 2, 250, 250, 250, 250, 250, 2, 250, 248, 250, 250, 250, 0},
            { 0, 250, 250, 2, 250, 0, 250, 250, 250, 250, 250, 250, 2, 250, 250, 250, 250, 2, 2, 2, 2, 250, 250, 2, 250, 2, 250, 250, 250, 250, 250, 0},
            { 0, 250, 250, 250, 250, 0, 0, 0, 0, 0, 0, 0, 2, 250, 250, 250,250, 250, 2, 2, 2, 250, 250, 250, 250, 0, 250, 250, 250, 250, 250, 0},
            { 0, 250, 250, 250, 250, 0, 0, 0, 0, 0, 0, 0, 2, 250, 250, 250, 250, 250, 250, 2, 2, 250, 250, 250, 250, 0, 0, 0, 0, 0, 0, 0},
            { 0, 250, 250, 250, 250, 250, 250, 250, 0, 2, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 0, 0, 0, 0, 0, 0, 0},
            { 0, 250, 250, 250, 250, 250, 250, 250, 0, 2, 2, 250, 250, 250, 250, 2, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 0},
            { 0, 250, 250, 250, 2, 250, 250, 250, 0, 2, 250, 250, 250, 250, 250, 250, 250, 250, 2, 2, 2, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 0},
            { 0, 250, 250, 250, 250, 250, 250, 250, 0, 250, 250, 250, 250, 250, 250, 250, 250, 250, 2, 2, 2, 2, 250, 250, 250, 250, 250, 250, 250, 250, 250, 0},
            { 0, 250, 250, 250, 250, 250, 250, 250, 0, 250, 250, 250, 250, 250, 250, 250, 0, 250, 2, 2, 0, 2, 250, 250, 250, 250, 250, 250, 250, 250, 250, 0},
            { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
        };

        int wallNumbers[MAP_ROWS][MAP_COLUMNS] = {
            { 3, 4, 10, 10, 4, 52, 26, 26, 81, 4, 4, 26, 9, 4, 4, 78, 4, 4, 52, 4, 4, 78, 4, 169, 170, 171, 4, 4, 81, 4, 4, 5},
            { 27, 49, 55, 55, 49, 27, 28, 50, 105, 28, 28, 50, 33, 28, 28, 102,28, 28, 27, 28, 28, 102, 28, 193, 194, 195, 50, 28, 105, 28, 28, 27},
            { 27, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27},
            { 27, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27},
            { 27, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27},
            { 27, 0, 0, 0, 26, 4, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27},
            { 27, 0, 0, 0, 50, 99, 50, 0, 0, 0, 0, 0, 26, 26, 26, 26, 26, 26, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27},
            { 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 50, 49, 49, 49, 50, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27},
            { 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27},
            { 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27},
            { 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 26, 73, 74, 73, 26, 27},
            { 27, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 50, 97, 98, 97, 50, 27},
            { 27, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 27},
            { 27, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27},
            { 27, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27},
            { 27, 0, 0, 0, 0, 51, 4, 4, 52, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 0, 0, 0, 0, 27},
            { 27, 0, 0, 0, 0, 28, 28, 28, 27, 28, 28, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 25, 25, 81, 25, 25, 27},
            { 27, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 100, 100, 105, 100, 100, 27},
            { 27, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27},
            { 27, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27},
            { 27, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27},
            { 27, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 53, 0, 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27},
            { 51, 26, 75, 26, 26, 75, 74, 26, 75, 75, 75, 75, 75, 26, 26, 74, 26, 169, 170, 171, 76, 26, 76, 26, 26, 74, 26, 26, 26, 26, 26, 29},
            { 50, 50, 99, 50, 50, 99, 98, 50, 99, 99, 99, 99, 99, 50, 50, 98, 50, 193, 194, 195, 100, 50, 100, 50, 50, 98, 50, 50, 50, 50, 50, 50}
        };

        int detailNumbers[MAP_ROWS][MAP_COLUMNS] = {
            { 0, 132, 0, 0, 132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            { 0, 156, 0, 0, 156, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 0, 0, 0, 0, 0, 0, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            { 0, 0, 0, 0, 0, 0, 0, 130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            { 0, 0, 0, 0, 0, 0, 0, 154, 0, 0, 0, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 0, 0, 0},
            { 0, 0, 0, 0, 0, 112, 0, 0, 0, 0, 0, 155, 0, 0, 130, 133, 134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 154, 157, 158, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 133, 134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 0, 0, 0, 0, 0, 157, 158, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            { 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            { 0, 0, 0, 0, 0, 0, 0, 0, 0, 154, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
            };
        std::vector<MapTile> mapTiles;
        std::vector<MapTile> wallTiles;
        std::vector<MapTile> detailTiles;
        sf::RectangleShape _winArea;
        sf::RectangleShape _light;

        std::vector<MapTile> winTiles;

        void loadMap();
        void saveMap();
        void initTextures();
        void initMap();
        void initWalls();
        void initDetails();
        void initWinArea();
        void initLightEffect();
    public:
        Map(GameDataRef data);
        ~Map();

        MapTile& getTile(int* pos);
        std::vector<MapTile>& getMap();
        std::vector<MapTile>& getWalls();
        std::vector<MapTile>& getDetails();
        sf::RectangleShape& getWinArea(){return _winArea;}
        void drawFilter();
        void drawLightEffect();
        void drawWinSprite();
        void drawWinArea();
        void update(float dt);
        void draw();
};


#endif // MAP_H
